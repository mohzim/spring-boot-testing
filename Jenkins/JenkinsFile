pipeline {
  agent {
    docker {
      image 'mohzimshaikh/maven-abhishek-docker-agent:v4'
      args '--user jenkins -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
    }
  }
  stages {
    stage('Checkout') {
      steps {
        sh 'echo passed'
      }
    }
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        // build the project and create a JAR file
        sh 'mvn clean package'
      }
    }
    /* stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://13.201.19.203:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'SonarQubeToken', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
    stage('Sleep to debug') {
      steps {
        echo "sleeping jenkins execution to debug"
        sleep 1
      }
    }
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "mohzimshaikh/ultimate-cicd:${BUILD_NUMBER}"
        // DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
            sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                dockerImage.push()
            }
        }
      }
    }
    stage('Check Changes') { //added stage to list files modified that triggered this pipeline
      steps {
        script {
          // Fetch changes using Git and store them in a temporary file
          sh "git config user.email 'mohzim@gmail.com'"
          sh "git config user.name 'mohzim'"
          sh "git fetch origin"
          sh "git diff --name-only HEAD^ HEAD > changed_files.txt"
        }
      }
    }

    stage('Update Deployment File') {
        when {
          expression {
            def changedFiles = readFile('changed_files.txt').trim()
            !changedFiles.split("\n").any { it.startsWith("java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/") }
            // check if the changes made are to the dir where deployment.yaml is present then skip
            // Execute this stage only if changes are detected outside the 'kubernetes' directory
          }
        }
        environment {
            GIT_REPO_NAME = "jenkins-prod-pipeline"
            GIT_USER_NAME = "mohzim"
        }
        steps {
            withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                sh '''
                  git config user.email "mohzim@gmail.com"
                  git config user.name "mohzim"
                  BUILD_NUMBER=${BUILD_NUMBER}
                  sed -Ei "s/ultimate-cicd:[0-9]+|ultimate-cicd:replaceImageTag/ultimate-cicd:${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                  git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                  git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                  git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:master
                '''
            }
        }
    } */
  }
  post {
      always {
        junit(
          allowEmptyResults: true,
          testResults: 'target/surefire-reports/*.xml'
        )
      }
  }
}